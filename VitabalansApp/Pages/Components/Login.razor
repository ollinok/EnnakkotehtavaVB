@page "/Kirjaudu"
@inject IUsersData _usersData
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider AuthStateProvider
@using VitabalansApp.Authentication

<div class="d-flex flex-column align-items-center py-3">
    <div class="col-11 col-lg-6 col-xl-4">
        <h3 class="text-center">Kirjaudu sisään</h3>
        <div class="border border-1 px-4 py-3 bg-light @(borderColor)">
            <EditForm Model="loginInfo" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                @*<ValidationMessage For="() => loginInfo.Email" />*@
                <div class="py-2">
                    <label for="email" class="form-label">Sähköposti:</label>
                     <InputText class="form-control" id="email" type="email" title="Sähköposti" @bind-Value="loginInfo.Email" placeholder="Email" autocomplete="off"/>
                </div>
                @*<ValidationMessage For="() => loginInfo.Password" />*@
                <div class="py-2">
                    <label for="password" class="form-label">Salasana:</label>
                     <InputText class="form-control" id="password" type="password" title="Salasana" @bind-Value="loginInfo.Password" placeholder="Salasana" autocomplete="off"/>
                </div>
                <div class="d-flex justify-content-between mt-2">
                    <div class="text-danger">
                        @message
                    </div>
                    <button type="submit" class="btn vb-btn vb-bg-turquoise">Kirjaudu</button>
                </div>
            </EditForm>
            <div class="align-self-baseline ms-1 mt-1 vb-text-pink text-decoration-underline">
                <span style="cursor: pointer;">Rekisteröidy</span>
            </div>
        </div>
    </div>
</div>

<div>
    @message
</div>

@code {
    LoginModel loginInfo = new LoginModel();
    private string borderColor = "";
    string message = "";

    private async Task LoginUser()
    {
        var userInfo = await _usersData.AuthenticateUser(loginInfo);

        if (userInfo is not null)
        {
            await _localStorage.SetItemAsync("jwt", $"{JwtData.CreateJWTToken(userInfo)}");
            var token = await _localStorage.GetItemAsStringAsync("jwt");
            await AuthStateProvider.GetAuthenticationStateAsync();
            message = "success";
        }
        else
        {
            borderColor = "border-danger";
            message = "Tunnusta ei löydetty.";
        }
    }
}
