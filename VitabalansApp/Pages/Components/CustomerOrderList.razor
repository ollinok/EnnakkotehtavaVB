@inject IOrdersData ordersData

@if (hasOrders && orders is null)
{
    <div class="position-relative border border-2 mb-2 vb-corder-box">
        <div class="position-absolute border-dark top-50 start-50 translate-middle fs-4">
            <button type="button" class="btn vb-bg-turquoise" @onclick="GetOrders">Hae tilaukset</button>
        </div>
    </div>
}else if (!hasOrders)
{
    <div class="position-relative border border-2 mb-2 vb-corder-box">
        <div class="position-absolute border-dark top-50 start-50 translate-middle fst-italic fs-5 text-center">
            Asiakkaalla ei ole aikaisempia tilauksia.
        </div>
    </div>
}else if (orders is not null)
{
    <div class="row"> <!-- 4. Määrä + järjestysnapit -->
        <div class="col-12 col-lg-6 align-self-center">
            Tilausten määrä: @customer?.Orders?.Count()
        </div>
        <div class="col-12 col-lg-6 d-flex justify-content-lg-end justify-content-center">
            <button class="vb-btn-round vb-btn-round-left vb-hover-item" @onclick="OrderByNew">Uusimmat</button>
            <button class="vb-btn-round vb-btn-round-right vb-hover-item" @onclick="OrderByOld">Vanhimmat</button>
        </div>
    </div>
    <div class="row"> <!-- 4. Lista -->
        @foreach (var order in orders)
        {
            <div class="col-12 col-xl-6 mt-2">
                <div class="d-grid">
                    <button 
                        type="button"
                        data-bs-toggle="collapse" data-bs-target="#collapse@(order.Id)" aria-expanded="false" aria-controls="collapse@(order.Id)"
                        class="btn d-flex justify-content-between vb-bg-turquoise fs-4 py-3 px-3"
                    >
                        <span>@order.CreatedAt.ToString("g")</span>
                        <span>ID @order.Id</span>
                    </button>
                </div>
                <div class="collapse border border-2" id="collapse@(order.Id)">                    
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Tuote:</th>
                                <th scope="col" class="text-end">Kpl.:</th>
                                <th scope="col" class="text-end">Hinta:</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in order.OrderItems)
                            {
                                <tr>
                                    <td class="col-6">@(item.Article?.Name ?? "UNKNOWN ITEM")</td>
                                    <td class="col-3 text-end">@item.Quantity</td>
                                    <td class="col-3 text-end">@item.Price €</td>
                                </tr>
                            }
                            <tr>
                                <td colspan="2" class="text-end fw-bold">Yhteensä:</td>
                                <td class="text-end fw-bold">@order.OrderItems.Sum(p => p.Price) €</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
        }
    </div>   
}

@code {
    [CascadingParameter(Name = "Customer")]
    private FullCustomersModel? customer { get; set; }

    [CascadingParameter(Name = "HasOrders")]
    private bool hasOrders { get; set; }

    private List<FullOrdersModel>? orders = null;
    private bool sortedNew;

    private async Task GetOrders()
    {
        orders = await ordersData.GetOrdersByList(customer!.Orders!);
        // Reverse the list to get the newest entries on top
        orders.Reverse();
        sortedNew = true;
    }

    private void OrderByNew()
    {
        if (!sortedNew)
        {
            orders!.Reverse();
            sortedNew = !sortedNew;
        }
    }

    private void OrderByOld()
    {
        if (sortedNew) 
        {
            orders!.Reverse();
            sortedNew = !sortedNew;
        }
    }
}
