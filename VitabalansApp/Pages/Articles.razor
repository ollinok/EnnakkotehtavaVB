@page "/Tuoteartikkelit"
@attribute [Authorize(Roles = "employee")]
@inject IArticlesData articlesData
@using VitabalansApp.Pages.Components.Utility;
@using VitabalansApp.Pages.Components;

<div class="container-fluid" @onclick="CloseSearchList">
    <div class="row gx-lg-4">
        <div class="col-xl-6 mb-2">
            <div class="d-flex justify-content-between">     
                <div class="mb-2">
                    <h1>Tuoteartikkelit</h1>
                    <CascadingValue Value="namesOnly" Name="ListOfItems">
                        <CascadingValue Value="closeList" Name="CloseList">
                            <SearchAutoComplete FilterResults="(s) => FilterArticles(s)"/>
                        </CascadingValue>
                    </CascadingValue>
                </div>
                <div class="mt-1 d-flex flex-column justify-content-center">
                    <a href="Tuoteartikkelit/@GetHrefNewArticle()">
                         <button type="button" class="btn vb-bg-turquoise vb-hover-turq ms-3 fs-5" @onclick="OpenNewForm">
                             Lisää
                        </button>
                    </a>
                   
                </div>
            </div>
            @if (articles is not null && articles.Count() != 0 && articles.Count() <= 10)
            {
                <div class="card my-2">
                    <ul class="list-group list-group-flush">
                        @foreach (var article in articles)
                        {
                            <li class="fw-bold list-group-item p-0 border border-2" @onclick="(() => OpenArticleInfo(article))">
                                <a href="Tuoteartikkelit/@GetHrefArticle()" class="text-decoration-none text-black d-block p-3 vb-hover-turq">@article.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
        <div class="col-xl-6" id="article-info">
            @if (chosenArticle is not null)
            {
                <CascadingValue Value="chosenArticle" Name="ChosenArticle">
                    <Article CloseComponent="CloseArticleInfo"/>
                </CascadingValue>
            }
        </div>
    </div>
</div>
@if (newArticle)
{
    <NewArticleForm CloseComponent="CloseNewForm"/>
}
<AnchorNavigation />

@code {
    private IEnumerable<FullArticlesModel>? chosenArticle;
    private IEnumerable<ArticlesModel>? articles;
    private IEnumerable<string>? namesOnly;
    private bool newArticle;
    private bool closeList;

    private async Task FilterArticles(string s)
    {
        var filtered = await articlesData.GetAllArticleNames();
        HashSet<string>? nameOnly = new HashSet<string>();

        if (!string.IsNullOrWhiteSpace(s))
        {
            filtered = filtered.Where(a => a.Name!.StartsWith(s, StringComparison.CurrentCultureIgnoreCase));
        }

        articles = filtered;
        foreach (var item in filtered)
        {
            nameOnly.Add(item.Name!.Split(' ')[0]);
        }
        namesOnly = nameOnly.Take(15);
        closeList = false;
    }

    private async Task OpenArticleInfo(ArticlesModel article)
    {
        chosenArticle = await articlesData.GetFullArticleInfo(article.Id);
    }

    private void CloseArticleInfo() => chosenArticle = null;
    private void CloseNewForm() => newArticle = false;
    private void OpenNewForm() 
    {
        // Clear everything on the page for a better mobile view
        newArticle = true; 
        chosenArticle = null;
        articles = null;
    }

    private string GetHrefArticle() => "#article-info";
    private string GetHrefNewArticle() => "#new-article-popup";
    private void CloseSearchList() => closeList = true;
}