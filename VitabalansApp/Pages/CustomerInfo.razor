@page "/Asiakastiedot/{Id}"
@attribute [Authorize(Roles = "employee")]
@inject ICustomersData _customersData
@inject NavigationManager NavMngr
@inject AuthenticationStateProvider AuthStateProvider

@if (customer is not null)
{
    <div class="container-fluid"> <!-- Koko sivu-->
        <div class="d-flex justify-content-between"> <!-- 2. Yläpalkki -->
            <div class=""> <!-- 3. Nimi -->
                <h2>@customer.Name</h2>
            </div>
            <div class="">
                <button type="button" class="btn btn-close" @onclick="GoToCustomersPage"></button>
            </div>
        </div>
        <div class="row"> <!-- 2. Infoalue -->
            <div class="col-12 col-lg-4"> <!-- 3. Kuva/Google Maps -->
                <img 
                    src="/images/apteekkik.jpg"
                    alt="Apteekki"
                    class="img-fluid border border-2 border-dark"
                />
            </div>
            <div class="col-12 col-lg-4 d-flex flex-column justify-content-center my-2"> <!-- 3. Yhteystiedot -->
                <div class="px-2 border border-1 bg-light">
                    <div class="my-3 fs-5">
                        <div>
                            @customer.Address?.Split(',')[0]
                        </div>
                        <div>
                            @customer.Address?.Split(',')[1]
                        </div>
                    </div>
                    <div class="my-3">
                        <a href="">@customer.Email</a>
                    </div>
                </div>
                
            </div>
            <div class="col-12 col-lg-4 d-flex flex-column justify-content-between align-items-center"> <!-- 3. Hintaryhmä -->
                <div class="fs-5">
                    Hintaryhmä
                </div>
                <div class="vb-greek-font border border-1 py-4 px-5 bg-light">
                    @greek[customer.PriceGroup.Id - 1]
                </div>
                <div class="fs-5 text-decoration-underline">
                    @customer.PriceGroup?.Name
                </div>
            </div>
        </div>

        <hr>
        
        <div> <!-- 2. Tilausalue -->
            <div> <!-- 3. Tilausyläpalkki -->
                <div>
                    <h3>Tilaukset</h3>
                </div>
            </div>
            <div> <!-- 3. Tilausluettelo-->
                <CascadingValue Value="customer" Name="Customer">
                    <CustomerOrderList />
                </CascadingValue>
            </div>
        </div>      
    </div>
}else
{
    <div>No customer found with the ID of @Id</div>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private FullCustomersModel? customer;
    private char[] greek = "\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A".ToCharArray();

    protected async override Task OnInitializedAsync()
    {
        await AuthStateProvider.GetAuthenticationStateAsync();
        customer = await _customersData.GetCustomerInfo(long.Parse(Id!));
    }

    private void GoToCustomersPage() => NavMngr.NavigateTo("/Asiakkaat");
}
