@page "/Customers"
@inject ICustomersData customersData
@inject ProtectedSessionStorage sessionStorage;

<div>
    <h1>Hae asiakkaita</h1>
    <div>
        <div>
            <input
                type="text"
                placeholder="Hae..."
                aria-label="Hakukenttä"
                @oninput="((i) => SearchHandler((string)i.Value!))"
            />
        </div>
        <div>
            <ul class="list-group list-group-horizontal">
                @foreach (var letter in alphabet)
                {
                    <li class="list-group-item" @onclick="(() => AlphabetHandler(letter))">
                        @letter
                    </li>
                }
            </ul>   
        </div>
    </div>
    <div>
        @if (customers is not null && isFiltered)
        {
            <div>@customers.Count()</div>
            <div>
                <ul>
                    <Virtualize Items="@customers" Context="c" OverscanCount="20">
                        <li>
                            @c.Name
                        </li>
                    </Virtualize>
                </ul> 
            </div>
        }
    </div>
</div>

@code {
    private string searchText = "";
    private char? chosenAlphabet;
    private bool isFiltered = false;
    private char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ".ToCharArray();

    private List<CustomersModel>? customers;

    //protected async override Task OnInitializedAsync()
    //{

    //}

    protected async override Task OnAfterRenderAsync(bool firstReload)
    {
        if (firstReload)
        {
            await GetFilterState();
            await FilterCustomers();
            StateHasChanged();
        }
    }

    private async Task GetFilterState()
    {
        var results = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = results.Success! ? results.Value! : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task SearchHandler(string text)
    {
        searchText = text;
        chosenAlphabet = null;
        await FilterCustomers();
    }

    private async Task AlphabetHandler(char letter)
    {    
        chosenAlphabet = letter;
        searchText = "";
        await FilterCustomers();
    }

    private async Task FilterCustomers()
    {
        var filtered = await customersData.GetAllCustomerNames();

        if (chosenAlphabet is not null)
        {
            filtered = filtered.Where(a => a.Name!.StartsWith(chosenAlphabet.ToString()!, StringComparison.CurrentCultureIgnoreCase));
            isFiltered = true;
        }
        else if (!string.IsNullOrWhiteSpace(searchText))
        {
            filtered = filtered.Where(a => a.Name!.StartsWith(searchText, StringComparison.CurrentCultureIgnoreCase));
            isFiltered = true;
        }
        else
        {
            isFiltered = false;
        }

        customers = filtered.ToList();

        await SaveFilterState();
    }
}
